@page "/yearly-calendar"
@inject HttpClient Http
@inject IJSRuntime JS

@if (isLoading)
{
    <p class="text-center">Loading holidays...</p>
}
else
{
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-center text-danger">@errorMessage</p>
    }

    <h3 class="text-center mb-4 text-white" style="color: #333;">Yearly Calendar - @DateTime.Now.Year</h3>
 <div class="container">
        <div class="row">
            @for (int month = 1; month <= 12; month++)
            {

                <div class="col-md-4 mb-4">
                    <div class="card" id="month-@month">
                        <div class="card-header text-center bg-primary text-white py-3">
                            @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month)
                        </div>
                        <div class="card-body p-3">
                            <table class="table table-bordered text-center">
                                <thead>
                                    <tr>
                                        <th>Su</th>
                                        <th>Mo</th>
                                        <th>Tu</th>
                                        <th>We</th>
                                        <th>Th</th>
                                        <th>Fr</th>
                                        <th>Sa</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        DateTime firstDay = new DateTime(DateTime.Now.Year, month, 1);
                                        int daysInMonth = DateTime.DaysInMonth(DateTime.Now.Year, month);
                                        int startDay = (int)firstDay.DayOfWeek;
                                        int currentDay = 1;
                                        bool start = false;
                                    }
                                    @for (int row = 0; row < 6 && currentDay <= daysInMonth; row++)
                                    {
                                        <tr>
                                            @for (int col = 0; col < 7; col++)
                                            {
                                                if (!start && col == startDay)
                                                {
                                                    start = true;
                                                }

                                                if (start && currentDay <= daysInMonth)
                                                {
                                                    var currentDate = new DateTime(DateTime.Now.Year, month, currentDay);
                                                    var holidayDetails = GetHolidayDetails(currentDate);
                                                    bool isHoliday = holidayDetails != null;
                                                    string cellClass = isHoliday
                                                    ? holidayDetails.Types.Contains("Public") ? "holiday-public"
                                                    : holidayDetails.Name.Contains("Day") ? "holiday-minor"
                                                    : "holiday-other"
                                                    : "";
                                                    string tooltipContent = isHoliday
                                                    ? $"<b>{holidayDetails.Name}</b><hr>" +
                                                    $"Local Name: {holidayDetails.LocalName}<br>" +
                                                    $"Date: {currentDate:dddd, MMMM dd, yyyy}<br>" +
                                                    $"Fixed Date: {(holidayDetails.Fixed ? "Yes" : "No")}<br>" +
                                                    $"Global: {(holidayDetails.Global ? "Yes" : "No")}<br>" +
                                                    $"Type: {string.Join(", ", holidayDetails.Types)}"
                                                    : $"{currentDate:dddd, MMMM dd, yyyy}";

                                                    <td class="@cellClass"
                                                        data-bs-toggle="tooltip"
                                                        data-bs-placement="top"
                                                        data-bs-html="true"
                                                        title="@tooltipContent">
                                                        @currentDay
                                                    </td>
                                                    currentDay++;
                                                }
                                                else
                                                {
                                                    <td></td>
                                                }
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private Dictionary<DateTime, HolidayResponse> Holidays = new();
    private bool isLoading = true;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await FetchHolidays();
        isLoading = false;
        await JS.InvokeVoidAsync("console.log", "Holidays loaded:", Holidays.Count);
    }

    private async Task FetchHolidays()
    {
        try
        {
            int year = DateTime.Now.Year; // 2025 based on current date (March 20, 2025)
            string url = $"https://date.nager.at/api/v3/PublicHolidays/{year}/US";
            var response = await Http.GetFromJsonAsync<HolidayResponse[]>(url);

            if (response != null)
            {
                Holidays.Clear();
                foreach (var holiday in response)
                {
                    if (DateTime.TryParse(holiday.Date, out DateTime holidayDate))
                    {
                        Holidays[holidayDate] = holiday;
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("console.log", $"Failed to parse date: {holiday.Date}");
                    }
                }
                await JS.InvokeVoidAsync("console.log", $"Fetched {Holidays.Count} holidays");
            }
            else
            {
                errorMessage = "No holiday data received from Nager.Date API";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching holidays: {ex.Message}";
            // Expanded fallback holidays for 2025
            Holidays = new Dictionary<DateTime, HolidayResponse>
            {
                { new DateTime(2025, 1, 1), new HolidayResponse { Name = "New Year's Day", LocalName = "New Year's Day", Date = "2025-01-01", Fixed = true, Global = true, Types = new[] { "Public" } } },
                { new DateTime(2025, 1, 20), new HolidayResponse { Name = "Martin Luther King Jr. Day", LocalName = "Martin Luther King Jr. Day", Date = "2025-01-20", Fixed = false, Global = true, Types = new[] { "Public" } } },
                { new DateTime(2025, 2, 17), new HolidayResponse { Name = "Presidents' Day", LocalName = "Washington's Birthday", Date = "2025-02-17", Fixed = false, Global = true, Types = new[] { "Public" } } },
                { new DateTime(2025, 5, 26), new HolidayResponse { Name = "Memorial Day", LocalName = "Memorial Day", Date = "2025-05-26", Fixed = false, Global = true, Types = new[] { "Public" } } },
                { new DateTime(2025, 6, 19), new HolidayResponse { Name = "Juneteenth", LocalName = "Juneteenth National Independence Day", Date = "2025-06-19", Fixed = true, Global = true, Types = new[] { "Public" } } },
                { new DateTime(2025, 7, 4), new HolidayResponse { Name = "Independence Day", LocalName = "Independence Day", Date = "2025-07-04", Fixed = true, Global = true, Types = new[] { "Public" } } },
                { new DateTime(2025, 9, 1), new HolidayResponse { Name = "Labor Day", LocalName = "Labor Day", Date = "2025-09-01", Fixed = false, Global = true, Types = new[] { "Public" } } },
                { new DateTime(2025, 10, 13), new HolidayResponse { Name = "Columbus Day", LocalName = "Columbus Day", Date = "2025-10-13", Fixed = false, Global = false, Types = new[] { "Public" } } },
                { new DateTime(2025, 11, 11), new HolidayResponse { Name = "Veterans Day", LocalName = "Veterans Day", Date = "2025-11-11", Fixed = true, Global = true, Types = new[] { "Public" } } },
                { new DateTime(2025, 11, 27), new HolidayResponse { Name = "Thanksgiving Day", LocalName = "Thanksgiving Day", Date = "2025-11-27", Fixed = false, Global = true, Types = new[] { "Public" } } },
                { new DateTime(2025, 12, 25), new HolidayResponse { Name = "Christmas Day", LocalName = "Christmas Day", Date = "2025-12-25", Fixed = true, Global = true, Types = new[] { "Public" } } }
            };
            await JS.InvokeVoidAsync("console.log", "Using fallback holidays due to error", ex.Message);
        }
    }

    public class HolidayResponse
    {
        public string Date { get; set; }
        public string Name { get; set; }
        public string LocalName { get; set; }
        public string CountryCode { get; set; }
        public bool Fixed { get; set; }
        public bool Global { get; set; }
        public string[] Types { get; set; }
    }

    private HolidayResponse? GetHolidayDetails(DateTime date) => Holidays.TryGetValue(date.Date, out var holiday) ? holiday : null;
}

<style>
    body {
        background: #f4f7fa;
        min-height: 100vh;
        font-family: 'Arial', sans-serif;
    }
    h3{
        color: white;
        font-weight: bolder;
    }

    .card {
        background: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        border: none;
    }

    /* Public holidays (major federal holidays) */
    .holiday-public {
        background: #ff4d4d; /* Red for major public holidays */
        color: white;
        border-radius: 50%;
        font-weight: bold;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

        .holiday-public:hover {
            background: #e63939; /* Darker red on hover */
            transform: scale(1.15);
        }

    /* Minor holidays (e.g., those with "Day" in the name) */
    .holiday-minor {
        background: #28a745; /* Green for minor holidays */
        color: white;
        border-radius: 50%;
        font-weight: bold;
        border: 1px solid #218838;
    }

        .holiday-minor:hover {
            background: #218838; /* Darker green on hover */
            transform: scale(1.15);
        }

    /* Other holidays (less common or regional) */
    .holiday-other {
        background: #ffa500; /* Orange for other holidays */
        color: white;
        border-radius: 50%;
        font-weight: bold;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    }

        .holiday-other:hover {
            background: #e69500; /* Darker orange on hover */
            transform: scale(1.15);
        }

    .table {
        background: #ffffff;
    }

        .table th {
            background: #e9ecef;
            color: #495057;
            border: none;
        }

        .table td {
            border: 1px solid #dee2e6;
            transition: transform 0.3s ease;
        }

            .table td:hover {
                transform: scale(1.1);
                z-index: 1;
            }

    /* Custom Tooltip Styling */
    .tooltip-inner {
        max-width: 300px;
        background: #2c3e50;
        color: #ffffff;
        padding: 12px 16px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        font-size: 14px;
        text-align: left;
    }

    .tooltip.bs-tooltip-top .tooltip-arrow::before {
        border-top-color: #2c3e50;
    }

    .tooltip-inner b {
        color: #ffd700;
    }

    .tooltip-inner hr {
        border: 0;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
        margin: 8px 0;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>